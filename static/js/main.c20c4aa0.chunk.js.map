{"version":3,"sources":["reportWebVitals.js","context/auth.js","helpers.js","component/LikeButton.js","component/Modal.js","util/graphQL.js","component/DeleteButton.js","component/PostCard.js","util/hooks.js","component/PostForm.js","pages/Home.js","component/FormGrp01.js","pages/Register.js","pages/Login.js","component/Navbar.js","util/AuthRoute.js","component/CommentCard.js","pages/SinglePost.js","App.js","ApolloProvider.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","user","localStorage","getItem","decodedToken","jwtDecode","exp","Date","now","removeItem","AuthContext","createContext","login","userData","logout","authReducer","state","action","type","payload","AuthProvider","props","useReducer","dispatch","Provider","value","setItem","token","navbarActions","pathname","window","location","path","substring","slice","substr","toLowerCase","underline","document","querySelectorAll","forEach","link","className","querySelector","classList","add","LIKE_POST_MUTATION","gql","LikeButton","post","id","likes","likeCount","history","useHistory","useState","liked","setLiked","useEffect","find","like","userId","useMutation","update","proxy","result","onError","error","variables","postId","likePost","handle_like","onClick","to","push","Modal","setConfirmOpen","deletePostOrMutation","FETCH_POSTS_QUERY","DELETE_POST_MUTATION","DELETE_COMMENT_MUTATION","DeleteButton","deletePostCallback","isComment","commentId","confirmOpen","mutation","current_data","readQuery","query","data","getPosts","filter","writeQuery","PostCard","username","createdAt","body","commentCount","useContext","moment","fromNow","comment","open_close_modal","useForm","callback","values","setValues","onChange","event","target","name","onSubmit","preventDefault","CREATE_POST_MUTATION","PostForm","createPost","console","log","placeholder","graphQLErrors","message","Home","useQuery","loading","map","FormGrp01","label","handle_change","REGISTER_USER","Register","context","errors","setErrors","addUser","email","password","confirmPassword","register","extensions","exception","noValidate","Object","keys","length","LOGIN_USER","Login","loginUser","Navbar","currentPage","setCurrentPage","handle_click","page","AuthRoute","Component","component","rest","render","CommentCard","SUBMIT_COMMENT_MUTATION","FETCH_POST_QUERY","SinglePost","postMarkup","setComment","match","params","submitComment","getPost","autoComplete","disabled","trim","comments","App","exact","httpLink","createHttpLink","uri","authLink","setContext","headers","Authorization","client","ApolloClient","concat","cache","InMemoryCache","ReactDOM","ApolloProvider","getElementById"],"mappings":"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","file":"static/js/main.c20c4aa0.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useReducer, createContext } from \"react\";\nimport jwtDecode from \"jwt-decode\";\n\n// Define an initial state\nconst initialState = {\n    user: null\n}\n\n// Check if there is already a token and it is valid\nif (localStorage.getItem(\"jwtToken\")) {\n    const decodedToken = jwtDecode(localStorage.getItem(\"jwtToken\"));\n\n    // If token is expired, remove it\n    if (decodedToken.exp * 1000 < Date.now()) {\n        localStorage.removeItem(\"jwtToken\");\n    } else {\n        initialState.user = decodedToken;\n    }\n}\n\n// Create a context\nconst AuthContext = createContext({\n    user: null,\n    login: (userData) => {},\n    logout: () => {}\n})\n\n// Create a reducer\nfunction authReducer(state, action) {\n    switch(action.type) {\n        case \"LOGIN\":\n            return {\n                ...state,\n                user: action.payload\n            };\n        case \"LOGOUT\":\n            return {\n                ...state,\n                user: null\n            }\n        default:\n            return state;\n    }\n}\n\nfunction AuthProvider(props) {\n    const [state, dispatch] = useReducer(authReducer, initialState);\n\n    function login(userData) {\n        localStorage.setItem(\"jwtToken\", userData.token);\n        dispatch({\n            type: \"LOGIN\",\n            payload: userData\n        })\n    }\n\n    function logout() {\n        localStorage.removeItem(\"jwtToken\");\n        dispatch({ type: \"LOGOUT\" });\n    }\n\n    return (\n        <AuthContext.Provider\n            value={{ user: state.user, login, logout }}\n            {...props}\n        />\n    )\n}\n\nexport { AuthContext, AuthProvider };","export const g2DateFormat = (output=String, seperator=String, input=0, timezone_offset=0) => {\n\n    // Month\n    let monthList = [\n        \"January\",\n        \"February\",\n        \"March\",\n        \"April\",\n        \"May\",\n        \"June\",\n        \"July\",\n        \"August\",\n        \"September\",\n        \"October\",\n        \"November\",\n        \"December\",\n    ];\n\n    // Weekday\n    let weekdayList = [\n        \"Sunday\",\n        \"Monday\",\n        \"Tuesday\",\n        \"Wednesday\",\n        \"Thursday\",\n        \"Friday\",\n        \"Saturday\",\n    ];\n\n    // Retrieve values\n    let now = typeof input === \"number\"\n                ? input > 0\n                    ? new Date(input * 1000)\n                    : new Date()\n                : typeof input === \"string\"\n                    ? new Date(input)\n                    : false;\n    if (isNaN(now)) return false;\n\n    // Timezone offset\n    let inputDate;\n    if (timezone_offset > 0) {\n        inputDate = new Date(now.getTime() + now.getTimezoneOffset() * 60000 + timezone_offset * 1000);\n    } else if (timezone_offset < 0) {\n        inputDate = new Date(now.getTime() + now.getTimezoneOffset() * 60000 + -Math.abs(timezone_offset * 1000));\n    } else {\n        inputDate = now;\n    }\n\n    let date = inputDate.getDate();\n    let dateNum = inputDate.getDate() < 10 ? \"0\" + inputDate.getDate() : inputDate.getDate();\n    let monthFull = monthList[inputDate.getMonth()];\n    let month = inputDate.getMonth() + 1;\n    let monthNum = month < 10 ? \"0\" + month : month;\n    let year = inputDate.getFullYear();\n    let weekday = weekdayList[inputDate.getDay()];\n    let hours = inputDate.getHours();\n    let hoursNum = hours < 10 ? \"0\" + hours : hours;\n    let minutes = inputDate.getMinutes();\n    let minutesNum = minutes < 10 ? \"0\" + minutes : minutes;\n    let seconds = inputDate.getSeconds();\n    let secondsNum = seconds < 10 ? \"0\" + seconds : seconds;\n    let hoursAPM = hours < 12 ? hours : hours - 12;\n    let APM = hours < 12 ? \"am\" : \"pm\";\n\n    // Timezone Offset\n    if (timezone_offset < 0) {\n\n    }\n\n    // Output Formats\n    let outputFormat = {\n        \"timestamp\": Math.floor(now), // 1600939836988\n        \"full_date\": `${date} ${monthFull} ${year}`, // 1 September 2020\n        \"full_date_DD\": `${dateNum} ${monthFull} ${year}`, // 01 September 2020\n        \"full_date_weekday\": `${date} ${monthFull} ${year}, ${weekday}`, // 1 September 2020, Sunday\n        \"full_date_DD_weekday\": `${dateNum} ${monthFull} ${year}, ${weekday}`, // 01 September 2020, Sunday\n        \"month_year\": `${monthFull} ${year}`, // September 2020\n        \"weekday\": weekday, // Sunday\n        \"YYYY\": year,// 2020\n        \"M\": month, // 9\n        \"MM\": monthNum, // 09\n        \"D\": date, // 1\n        \"DD\": dateNum, // 01\n        // Date without seperation\n        \"YYYYMM\": `${year}${seperator}${monthNum}`, // 202009\n        \"YYYYMMDD\": `${year}${seperator}${monthNum}${seperator}${dateNum}`, // 20200901\n        \"MMDD\": `${monthNum}${seperator}${dateNum}`, // 0901\n        \"MMYYYY\": `${monthNum}${seperator}${year}`, // 092020\n        \"DDMMYYYY\": `${dateNum}${seperator}${monthNum}${seperator}${year}`, // 01092020\n        \"DDMM\": `${dateNum}${seperator}${monthNum}`, // 0109\n        \"YYYYM\": `${year}${seperator}${month}`, // 20209\n        \"YYYYMD\": `${year}${seperator}${month}${seperator}${date}`, // 202091\n        \"MD\": `${month}${seperator}${date}`, // 91\n        \"MYYYY\": `${month}${seperator}${year}`, // 92020\n        \"DMYYYY\": `${date}${seperator}${month}${seperator}${year}`, // 192020\n        \"DM\": `${date}${seperator}${month}`, // 19\n        // Time\n        \"H\": hours, // 5\n        \"m\": minutes, // 7\n        \"S\": seconds, // 9\n        \"HH\": hoursNum, // 05\n        \"mM\": minutesNum, // 07\n        \"SS\": secondsNum, // 09\n        \"HM\": `${hours}${minutes}`, // 57\n        \"HMS\": `${hours}${minutes}${seconds}`, // 579\n        \"HHMM\": `${hoursNum}${seperator}${minutesNum}`, // 0507\n        \"HHMMSS\": `${hoursNum}${seperator}${minutesNum}${seperator}${secondsNum}`, // 050709\n        \"HH:MM\": `${hoursNum}:${minutesNum}`, // 05:07\n        \"HH:MM:SS\": `${hoursNum}:${minutesNum}:${secondsNum}`, // 05:07:09\n        \"H:MM_APM\": `${hoursAPM}:${minutesNum}${APM}`, // 5:07am\n        \"H:MM:SS_APM\": `${hoursAPM}:${minutesNum}:${secondsNum}${APM}`, // 5:07:09am\n        \"H_APM\": `${hoursAPM}${APM}`, // 5am\n        \"APM\": APM, // am\n    };\n\n    // if output is not on the list, return false\n    if (!outputFormat.hasOwnProperty(output)) return false;\n    \n    // Declare result\n    let result = outputFormat[output];\n\n    //return result;\n    return typeof result === \"number\" ? result.toString() : result;\n};\n\nexport const navbarActions = () => {\n    let pathname = window.location.pathname;\n    const path = pathname === \"/\" || pathname.substring(1).slice(0,5) === \"posts\"\n        ? \"home\"\n        : pathname.substr(1).toLowerCase();\n\n\n\n    const underline = () => {\n        document.querySelectorAll(\".navbar-link\").forEach(link => {\n            link.className = \"navbar-link\";\n        });\n        let page = document.querySelector(`#navbar-${path}`);\n        page.classList.add(\"navbar-link-active\");\n    }\n\n    return {\n        underline\n    }\n}","import React, { useEffect, useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport {gql, useMutation, } from \"@apollo/client\";\n\nimport { navbarActions } from \"../helpers\"\n\nconst LikeButton = ({ user, post: { id, likes, likeCount } }) => {\n\n    let history = useHistory();\n\n    const [liked, setLiked] = useState(false);\n    \n    useEffect(() => {\n        if (user && likes.find(like => like.userId === user.id)) {\n            setLiked(true);\n        } else {\n            setLiked(false);\n        }\n    }, [user, likes])\n\n    const [likePost] = useMutation(LIKE_POST_MUTATION, {\n            update(proxy, result) {\n            },\n            onError(error) {  \n            },\n            variables: { postId: id }\n        }\n    )\n\n    const handle_like = () => {\n        likePost();\n    }\n\n    const handle_like_login = () => {\n        history.push(\"/\");\n        navbarActions().underline();\n    }\n\n    const likeButton = user ? (\n            liked ? (\n                <button className=\"postcard-btn\" onClick={()=>handle_like()}>\n                    <i className=\"fas fa-heart postcard-btn-icon postcard-btn-icon-active\"></i>\n                    <p className=\"postcard-btn-num\">{likeCount}</p>\n                </button>\n            ) : (\n                <button className=\"postcard-btn\" onClick={()=>handle_like()}>\n                    <i className=\"far fa-heart postcard-btn-icon\"></i>\n                    <p className=\"postcard-btn-num\">{likeCount}</p>\n                </button>\n            )\n        ) : (\n            <Link to=\"/login\">\n                <button className=\"postcard-btn\" onClick={()=>handle_like_login()}>\n                    <i className=\"far fa-heart postcard-btn-icon\"></i>\n                    <p className=\"postcard-btn-num\">{likeCount}</p>\n                </button>\n            </Link>\n        )\n\n    return likeButton;\n}\n\nconst LIKE_POST_MUTATION = gql`\n    mutation likePost($postId: ID!){\n        likePost(postId: $postId){\n            id\n            body\n            createdAt\n            userId\n            username\n            commentCount\n            likeCount\n            comments {\n                id\n                userId\n                username\n                createdAt\n                body\n            }\n            likes {\n                id\n                userId\n                username\n                createdAt\n            }\n        }\n    }\n`\n\nexport default LikeButton;","import React from \"react\";\n\nconst Modal = ({ setConfirmOpen, deletePostOrMutation }) => {\n\n    return(\n        <div className=\"confirm-delete\">\n            <div className=\"confirm-delete-overlay\">\n                <div className=\"confirm-delete-box\">\n                    <p className=\"confirm-delete-box-p\">Are you sure?</p>\n                    <div className=\"confirm-delete-box-btns\">\n                        <button className=\"confirm-delete-box-btn\" onClick={()=>setConfirmOpen(false)}><i className=\"fas fa-undo-alt\"></i></button>\n                        <button className=\"confirm-delete-box-btn confirm-delete-box-btn-delete\" onClick={()=>deletePostOrMutation()}><i className=\"far fa-trash-alt\"></i></button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Modal;","import { gql } from \"@apollo/client\";\n\nexport const FETCH_POSTS_QUERY = gql`\n    {\n        getPosts {\n            id\n            body\n            createdAt\n            userId\n            username\n            commentCount\n            likeCount\n            comments {\n                id\n                userId\n                username\n                createdAt\n                body\n            }\n            likes {\n                id\n                userId\n                username\n                createdAt\n            }\n        }\n    }\n`","import React, { useState } from \"react\";\nimport { gql, useMutation } from \"@apollo/client\";\nimport Modal from \"./Modal\";\n\nimport { FETCH_POSTS_QUERY } from \"../util/graphQL\";\n\nconst DeleteButton = ({ postId, deletePostCallback, isComment, commentId }) => {\n    const [confirmOpen, setConfirmOpen] = useState(false);\n\n    // Create a dynamic mutation variable\n    const mutation = commentId ? DELETE_COMMENT_MUTATION : DELETE_POST_MUTATION ;\n\n    const [deletePostOrMutation] = useMutation(mutation, {\n        update(proxy) {\n\n            // If delete post\n            if (!commentId) {\n                // Remove from cache once deleted\n                const current_data = proxy.readQuery({\n                    query: FETCH_POSTS_QUERY\n                })\n                let data = { ...current_data };\n                data.getPosts = data.getPosts.filter(post => post.id !== postId);\n                proxy.writeQuery({ query: FETCH_POSTS_QUERY, data });\n            };\n\n            // if there is a callback\n            if (deletePostCallback) deletePostCallback();\n        },\n        variables: {\n            postId,\n            commentId\n        }\n    });\n\n    return(\n        <div>\n            <button className={isComment ? `postcard-btn-right postcard-btn-comment` : \"postcard-btn-right\"} onClick={()=>setConfirmOpen(true)}>\n                <i className=\"fas fa-trash-alt\"></i>\n            </button>\n            {confirmOpen && (\n                <Modal \n                    setConfirmOpen={setConfirmOpen}\n                    deletePostOrMutation={deletePostOrMutation}\n                />\n            )}\n        </div>\n    )\n}\n\nconst DELETE_POST_MUTATION = gql`\n    mutation deletePost($postId: ID!) {\n        deletePost(postId: $postId)\n    }\n`;\n\nconst DELETE_COMMENT_MUTATION = gql `\n    mutation deleteComment($postId: ID!, $commentId: ID!) {\n        deleteComment(postId: $postId, commentId: $commentId) {\n            id\n            comments {\n                id username createdAt body\n            }\n            commentCount\n        }\n    }\n`\n\nexport default DeleteButton;","import React, { useContext } from 'react';\nimport { Link } from \"react-router-dom\";\nimport moment from \"moment\";\n\nimport { AuthContext } from \"../context/auth\";\nimport LikeButton from './LikeButton';\nimport DeleteButton from './DeleteButton';\n\nconst PostCard = (props) => {\n    let {id, userId, username, createdAt, body, likeCount, commentCount, likes} = props.post;\n    \n    const adminId = \"5fe59a8218d0de5001587e43\";\n    const { user } = useContext(AuthContext);\n\n    return (\n        <div className=\"postcard\">\n            <div className=\"postcard-body\">\n                <p className=\"postcard-header\">\n                    {username}\n                </p>\n                <p className=\"postcard-createdAt\">\n                    {moment(createdAt).fromNow()}\n                </p>\n                <p className=\"postcard-content\">\n                    {body}\n                </p>\n            </div>\n            <div className=\"postcard-btns\">\n                <LikeButton\n                    user={user}\n                    post={{ id, likes, likeCount }}\n                />\n                {props.comment ? (\n                    <Link to={`posts/${id}`}>\n                        <button className=\"postcard-btn\">\n                            <i className=\"far fa-comments postcard-btn-icon\"></i>\n                            <p className=\"postcard-btn-num\">{commentCount}</p>\n                        </button>\n                    </Link>\n                ) : (\n                    <button className=\"postcard-btn\">\n                        <i className=\"far fa-comments postcard-btn-icon\"></i>\n                        <p className=\"postcard-btn-num\">{commentCount}</p>\n                    </button>\n                )}\n                {user && (user.id === userId || user.id === adminId) && (\n                    <DeleteButton\n                        postId={id}\n                        open_close_modal={props.open_close_modal}\n                        deletePostCallback={props.deletePostCallback}\n                    />\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport default PostCard;","import { useState } from \"react\";\n\n// Custom hook\nexport const useForm = (callback, initialState = {}) => {\n    const [values, setValues] = useState(initialState);\n\n    const onChange = (event) => {\n        setValues({ ...values, [event.target.name]: event.target.value });\n    }\n\n    const onSubmit = (event) => {\n        event.preventDefault();\n        callback();\n    }\n\n    return {\n        onChange,\n        onSubmit,\n        values\n    }\n}","import React from \"react\";\nimport { gql, useMutation } from \"@apollo/client\";\n\nimport { useForm } from \"../util/hooks\";\nimport { FETCH_POSTS_QUERY } from \"../util/graphQL\";\n\nconst PostForm = () => {\n\n    const { values, onChange, onSubmit } = useForm(createPostCallback, {\n        body: \"\"\n    });\n\n    const [createPost, { error }] = useMutation(CREATE_POST_MUTATION, {\n        variables: values,\n        update(proxy, result) {\n            // Access proxy: CACHE is immutable in V.3\n            const current_data = proxy.readQuery({\n                query: FETCH_POSTS_QUERY\n            })\n\n            // Copy an object instance of current data before any mutations\n            let data = {...current_data};\n\n            // Mutate\n            data.getPosts = [result.data.createPost, ...data.getPosts];\n            proxy.writeQuery({ query: FETCH_POSTS_QUERY, data });\n            values.body = \"\";\n        },\n        onError(error) {\n            console.log(error);\n        }\n    })\n\n    function createPostCallback() {\n        createPost();\n    }\n\n    return(\n        <form className=\"form-02\" onSubmit={(event)=>onSubmit(event)}>\n            <h2 className=\"form-02-title\">Create a post:</h2>\n            <div className=\"form-02-grp\">\n                <input\n                    id=\"form-02-input\"\n                    className={error ? \"form-02-input form-02-input-error\" : \"form-02-input\"}\n                    placeholder=\"Hi World!\"\n                    name=\"body\"\n                    onChange={(event)=>onChange(event)}\n                    value={values.body}\n                />\n                {error && (\n                    <ul className=\"form-02-error\">\n                        <li className=\"form-02-error-p\">{error.graphQLErrors[0].message}</li>    \n                    </ul>\n                )}\n                <button className=\"form-02-submit\">Submit</button>\n            </div>\n        </form>\n    )    \n}\n\nconst CREATE_POST_MUTATION = gql`\n    mutation createPost(\n        $body: String!\n    ) {\n        createPost(\n            body: $body\n        ) {\n            id\n            userId\n            username\n            createdAt\n            body\n            likeCount\n            commentCount\n            comments {\n                id\n                userId\n                username\n                createdAt\n                body\n            }\n            likes {\n                id\n                userId\n                username\n                createdAt\n            }\n        }\n    }\n`\n\nexport default PostForm;","import React, { useEffect, useContext } from 'react';\nimport { useQuery } from \"@apollo/client\";\n\nimport { AuthContext } from \"../context/auth\";\nimport PostCard from \"../component/PostCard\";\nimport PostForm from \"../component/PostForm\";\nimport { FETCH_POSTS_QUERY } from \"../util/graphQL\";\nimport { navbarActions } from \"../helpers\";\n\nconst Home = () => {\n\n    useEffect(() => {\n        navbarActions().underline();\n    })\n\n    const { user } = useContext(AuthContext);\n    \n    const { \n        loading, \n        data \n    } = useQuery(FETCH_POSTS_QUERY);\n\n    return (\n        <div className=\"container\">\n            <h1 className=\"containerH1\">Recent Posts</h1>\n            <div className=\"home\">\n                {user && (\n                    <div className=\"home-comment\">\n                        <PostForm />\n                    </div>\n                )}\n                {loading\n                    ? <h1>Loading posts...</h1>\n                    : (\n                       data.getPosts && data.getPosts.map(post => (\n                            <PostCard \n                                key={post.id}\n                                post={post}\n                                comment={true}\n                            />\n                       )) \n                    )\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default Home;","import React from \"react\";\n\nconst FormGrp01 = (props) => {\n\n    return(\n        <div className={props.error ? \"form-01-grp form-01-grp-error\" : \"form-01-grp\"}>\n            <label className=\"form-01-grp-label\">\n                {props.label}\n            </label>\n            <input \n                id={props.id}\n                className=\"form-01-grp-input\"\n                type={props.type}\n                value={props.value}\n                placeholder={props.placeholder}\n                name={props.name}\n                onChange={(event)=>props.handle_change(event)}\n            />\n        </div>\n    )\n}\n\nexport default FormGrp01;","import React, { useState, useContext } from 'react';\nimport FormGrp01 from \"../component/FormGrp01\";\n\nimport { gql, useMutation } from '@apollo/client';\n\n// Import hook\nimport { AuthContext } from \"../context/auth\";\nimport { useForm } from \"../util/hooks\";\n\nconst Register = (props) => {\n\n    const context = useContext(AuthContext);\n\n    const [errors, setErrors] = useState({});\n\n    const { onChange, onSubmit, values } = useForm(registerUser, {\n        username: \"\",\n        email: \"\",\n        password: \"\",\n        confirmPassword: \"\"\n    })\n\n    const [addUser, { loading }] = useMutation(REGISTER_USER, {\n        update(proxy, { data: { register: userData} }) {\n            context.login(userData);\n            props.history.push(\"/\");\n        },\n        onError(error) {\n            setErrors(error.graphQLErrors[0].extensions.exception.errors);\n        },\n        variables: values\n    })\n\n    function registerUser() {\n        addUser();\n    }\n\n    return (\n        <div className=\"container\">\n            <h1 className=\"containerH1\">Register</h1>\n            <form className={loading ? \"form-01-loading\" : \"form-01\"} onSubmit={(event)=>onSubmit(event)} noValidate>\n                <div className=\"form-01-loading-icon-con\">\n                    <i className=\"form-01-loading-icon fas fa-spinner\"></i>\n                </div>\n                <FormGrp01\n                    label=\"Username\"\n                    placeholder=\"Username\"\n                    type=\"text\"\n                    name=\"username\"\n                    value={values.username}\n                    error={errors.username ? true : false}\n                    handle_change={onChange}\n                />\n                <FormGrp01\n                    label=\"Email\"\n                    placeholder=\"Email\"\n                    type=\"email\"\n                    name=\"email\"\n                    value={values.email}\n                    error={errors.email ? true : false}\n                    handle_change={onChange}\n                />\n                <FormGrp01\n                    label=\"Password\"\n                    placeholder=\"Password\"\n                    type=\"password\"\n                    name=\"password\"\n                    value={values.password}\n                    error={errors.password ? true : false}\n                    handle_change={onChange}\n                />\n                <FormGrp01\n                    label=\"Confirm Password\"\n                    placeholder=\"Confirm Password\"\n                    type=\"password\"\n                    name=\"confirmPassword\"\n                    value={values.confirmPassword}\n                    error={errors.confirmPassword ? true : false}\n                    handle_change={onChange}\n                />\n                <button className=\"form-01-submit-btn\">SUBMIT</button>\n                {Object.keys(errors).length > 0 && (\n                    <div className=\"form-01-error\">\n                        <ul className=\"form-01-error-list\">\n                            {Object.values(errors).map(value =>\n                                <li key={value}  className=\"form-01-error-list-li\">{value}</li>  \n                            )}\n                        </ul>\n                    </div>\n                )}\n            </form>\n        </div>\n    )\n}\n\n\nconst REGISTER_USER = gql`\n    mutation register (\n        $username: String!\n        $email: String!\n        $password: String!\n        $confirmPassword: String!\n    ) {\n        register(\n            registerInput: {\n                username: $username, \n                email: $email, \n                password: $password, \n                confirmPassword: $confirmPassword\n            }\n        ){\n            id\n            username\n            email\n            createdAt\n            token\n        }\n    }\n`;\n\nexport default Register;","import React, { useEffect, useState, useContext } from 'react';\nimport FormGrp01 from \"../component/FormGrp01\";\n\nimport { gql, useMutation } from '@apollo/client';\n\n// Import hook\nimport { AuthContext } from \"../context/auth\";\nimport { useForm } from \"../util/hooks\";\nimport { navbarActions } from \"../helpers\";\n\nconst Login = (props) => {\n\n    useEffect(() => {\n        navbarActions().underline();\n    })\n\n    // Access to context\n    const context = useContext(AuthContext);\n\n    // Define errors\n    const [errors, setErrors] = useState({});\n\n    const { onChange, onSubmit, values } = useForm(loginUserCallback, {\n        username: \"\",\n        password: \"\",\n    })\n\n    const [loginUser, { loading }] = useMutation(LOGIN_USER, {\n        update(proxy, { data: { login: userData }}) {\n            context.login(userData);\n            props.history.push(\"/\");\n            navbarActions().underline();\n        },\n        onError(error) {\n            setErrors(error.graphQLErrors[0].extensions.exception.errors);\n        },\n        variables: values\n    })\n\n    function loginUserCallback() {\n        loginUser();\n    }\n\n    return (\n        <div className=\"container\">\n            <h1 className=\"containerH1\">Login</h1>\n            <form className={loading ? \"form-01-loading\" : \"form-01\"} onSubmit={(event)=>onSubmit(event)} noValidate>\n                <div className=\"form-01-loading-icon-con\">\n                    <i className=\"form-01-loading-icon fas fa-spinner\"></i>\n                </div>\n                <FormGrp01\n                    label=\"Username\"\n                    placeholder=\"Username\"\n                    type=\"text\"\n                    name=\"username\"\n                    value={values.username}\n                    error={errors.username ? true : false}\n                    handle_change={onChange}\n                />\n                <FormGrp01\n                    label=\"Password\"\n                    placeholder=\"Password\"\n                    type=\"password\"\n                    name=\"password\"\n                    value={values.password}\n                    error={errors.password ? true : false}\n                    handle_change={onChange}\n                />\n                <button className=\"form-01-submit-btn\">SUBMIT</button>\n                {Object.keys(errors).length > 0 && (\n                    <div className=\"form-01-error\">\n                        <ul className=\"form-01-error-list\">\n                            {Object.values(errors).map(value =>\n                                <li key={value}  className=\"form-01-error-list-li\">{value}</li>  \n                            )}\n                        </ul>\n                    </div>\n                )}\n            </form>\n        </div>\n    )\n}\n\n\nconst LOGIN_USER = gql`\n    mutation login (\n        $username: String!\n        $password: String!\n    ) {\n        login(\n                username: $username,\n                password: $password\n        ){\n            id\n            username\n            email\n            createdAt\n            token\n        }\n    }\n`;\n\nexport default Login;","import React, { useEffect, useState, useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { navbarActions } from \"../helpers\";\nimport { AuthContext } from \"../context/auth\";\n\nconst Navbar = () => {\n    // Access context\n    const { user, logout } = useContext(AuthContext);\n\n    let [currentPage, setCurrentPage] = useState(\"home\");\n    \n    // Activate the navbar item according to link \n    let pathname = window.location.pathname;\n    \n    useEffect(() => {\n        const path = pathname === \"/\" ? \"home\" : pathname.substr(1).toLowerCase();\n        setCurrentPage(path);\n        navbarActions().underline();\n    }, [pathname, currentPage, setCurrentPage])\n\n    const handle_click = (page) => {\n        setCurrentPage(page);\n    }\n\n    const handle_logout = (page) => {\n        handle_click(page);\n        logout();\n    }\n\n    const navbar = user ? (\n        <div id=\"navbar\" className=\"Navbar\">\n            <Link id=\"navbar-home\" className=\"navbar-link\" to=\"/\" onClick={()=>handle_click(\"home\")}>\n                <p className=\"navbarP\">{user.username}</p>\n            </Link>\n            <Link id=\"navbar-login\" className=\"navbar-link\" to=\"/\" onClick={()=>handle_logout(\"home\")}>\n                <p className=\"navbarP\">Logout</p>\n            </Link>\n        </div>\n        ) : (\n            <div id=\"navbar\" className=\"Navbar\">\n                <Link id=\"navbar-home\" className=\"navbar-link\" to=\"/\" onClick={()=>handle_click(\"home\")}>\n                    <p className=\"navbarP\">Home</p>\n                </Link>\n                <Link id=\"navbar-login\" className=\"navbar-link\" to=\"/login\" onClick={()=>handle_click(\"login\")}>\n                    <p className=\"navbarP\">Login</p>\n                </Link>\n                <Link id=\"navbar-register\" className=\"navbar-link\" to=\"/register\" onClick={()=>handle_click(\"register\")}>\n                    <p className=\"navbarP\">Register</p>\n                </Link>\n            </div>\n        )\n\n    return navbar;\n}\n\nexport default Navbar;","import React, { useContext } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nimport { AuthContext } from \"../context/auth\";\n\nconst AuthRoute = ({ component: Component, ...rest }) => {\n    const { user } = useContext(AuthContext);\n\n    return(\n        <Route \n            {...rest}\n            render={props => \n                user ? <Redirect to=\"/\"/> : <Component {...props} />\n            }\n        />\n    )\n}\n\nexport default AuthRoute;","import React, { useContext } from 'react';\nimport moment from \"moment\";\n\nimport { AuthContext } from \"../context/auth\";\nimport DeleteButton from './DeleteButton';\n\nconst CommentCard = (props) => {\n    let postId = props.postId;\n    let {id, userId, username, createdAt, body} = props.comment;\n    \n    const adminId = \"5fe59a8218d0de5001587e43\";\n    const { user } = useContext(AuthContext);\n\n    return (\n        <div className=\"postcard postcard-comment\">\n            <div className=\"postcard-body\">\n                <p className=\"postcard-header\">\n                    {username}\n                </p>\n                <p className=\"postcard-createdAt\">\n                    {moment(createdAt).fromNow()}\n                </p>\n                <p className=\"postcard-content\">\n                    {body}\n                </p>\n            </div>\n            <div className=\"postcard-btns postcard-comment-btns\">\n                {user && (user.id === userId || user.id === adminId) && (\n                    <DeleteButton\n                        postId={postId}\n                        commentId={id}\n                        open_close_modal={props.open_close_modal}\n                        isComment={true}\n                    />\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport default CommentCard;","import React, { useState, useContext } from \"react\";\nimport { gql, useQuery, useMutation } from \"@apollo/client\";\n\nimport PostCard from \"../component/PostCard\";\nimport CommentCard from \"../component/CommentCard\";\nimport { AuthContext } from \"../context/auth\";\n\nconst SinglePost = (props) => {\n\n    const { user } = useContext(AuthContext);\n\n    const [comment, setComment] = useState('');\n\n    const postId = props.match.params.postId;\n\n    const { data, loading } = useQuery(FETCH_POST_QUERY, {\n        variables: {\n            postId\n        }\n    })\n\n    const [submitComment] = useMutation(SUBMIT_COMMENT_MUTATION, {\n        update() {\n            setComment('');\n        },\n        variables: {\n            postId,\n            body: comment\n        }\n    })\n\n    // deletePost\n    function deletePostCallback() {\n        props.history.push(\"/\");\n    }\n\n    // DOM content to be returned\n    let postMarkup;\n\n    // If not finish loading\n    if (!data) {\n        postMarkup = <p>Loading post...</p>\n    } else {\n        //const { id, userId, username, createdAt, body, likeCount, commentCount, likes, comments } = data.getPost;\n        const post = data.getPost;\n\n        postMarkup = (\n            <div className=\"container\">\n                <div className=\"singlePost\">\n                    {loading \n                        ? <h1>Loading...</h1>\n                        : (\n                            <PostCard \n                                key={post.id}\n                                post={post}\n                                comment={false}\n                                deletePostCallback={deletePostCallback}\n                            />\n                        )\n                    }\n                    {user && (\n                        <div className=\"singlePost-comment\">\n                            <p className=\"singlePost-comment-title\">Post a comment</p>\n                            <form className=\"singlePost-comment-form\" onSubmit={event=>event.preventDefault()}>\n                                <input\n                                    className=\"singlePost-comment-input\"\n                                    type=\"text\"\n                                    placeholder=\"Comment...\"\n                                    name=\"comment\"\n                                    value={comment}\n                                    autoComplete=\"off\"\n                                    onChange={event => setComment(event.target.value)}\n                                />\n                                <button \n                                    className=\"singlePost-comment-submit\"\n                                    disabled={comment.trim() === \"\"}\n                                    onClick={()=>submitComment()}\n                                >\n                                    Submit\n                                </button>\n                            </form>\n                        </div>\n                    )}\n                    {loading \n                        ? <h1>Loading...</h1>\n                        : post.comments.map(comment => (\n                                <CommentCard \n                                    key={comment.id}\n                                    postId={post.id}\n                                    comment={comment}\n                                    deletePostCallback={deletePostCallback}\n                                />\n                            ))\n                    }\n                </div>\n            </div>\n        )\n    }\n\n    return postMarkup;\n}\n\nconst SUBMIT_COMMENT_MUTATION = gql`\n    mutation($postId: ID!, $body: String!) {\n        createComment(postId: $postId, body: $body) {\n            id\n            comments {\n                id userId username createdAt body\n            }\n            commentCount\n        }\n    }\n`;\n\n\nconst FETCH_POST_QUERY = gql`\n    query($postId: ID!) {\n        getPost(postId: $postId) {\n            id userId username createdAt body likeCount commentCount\n            likes {\n                userId\n            }\n            comments {\n                id\n                userId\n                username\n                createdAt\n                body\n            }\n        }\n    }\n\n`;\n\nexport default SinglePost;","import React from \"react\";\nimport {\n    BrowserRouter as Router,\n    Route,\n  } from \"react-router-dom\";\nimport './App.css';\n\nimport { AuthProvider } from \"./context/auth\";\n\nimport Home from \"./pages/Home\";\nimport Register from \"./pages/Register\";\nimport Login from \"./pages/Login\";\nimport Navbar from \"./component/Navbar\";\nimport AuthRoute from \"./util/AuthRoute\";\nimport SinglePost from \"./pages/SinglePost\";\n\nconst App = () => {\n    return(\n        <AuthProvider>\n            <Router>\n                <Navbar key=\"navbar\" />\n                <Route exact path=\"/\" component={Home} />\n                <AuthRoute exact path=\"/login\" component={Login} />\n                <AuthRoute exact path=\"/register\" component={Register} />\n                <Route exact path=\"/posts/:postId\" component={SinglePost} />\n            </Router>\n        </AuthProvider>\n    )\n}\n\nexport default App;","import React from \"react\";\nimport App from \"./App\";\nimport ApolloClient from \"apollo-client\";\nimport { ApolloProvider, createHttpLink, InMemoryCache } from \"@apollo/client\";\nimport { setContext } from \"apollo-link-context\";\n\nconst httpLink = createHttpLink({\n    // uri: \"http://localhost:5000\"\n    uri: \"https://g2social-backend.herokuapp.com\"\n})\n\nconst authLink = setContext(() => {\n    const token = localStorage.getItem(\"jwtToken\");\n    \n    // modify the current request\n    return {\n        headers: {\n            Authorization: token ? `Bearer ${token}` : \"\"\n        }\n    }\n})\n\nconst client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache()\n})\n\nexport default (\n    <ApolloProvider client={client}>\n        <App />\n    </ApolloProvider>\n)","import ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nimport ApolloProvider from \"./ApolloProvider\";\n\nReactDOM.render(\n  ApolloProvider,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}